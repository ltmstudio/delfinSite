const { PrismaClient } = require('../../src/generated/prisma/client');

const prisma = new PrismaClient();

/**
 * Product Seeder
 * –°–æ–∑–¥–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã (–∫–∞–∫ –≤ Laravel)
 */
async function seedProducts() {
  console.log('üõçÔ∏è  –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...');
  
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categories = await prisma.category.findMany();
    const categoryMap = {};
    categories.forEach(cat => {
      categoryMap[cat.name] = cat.id;
    });

    const products = [
      {
        name: '–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∫–æ–≤–∏–Ω—ã 8609',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–º–µ—Å–∏—Ç–µ–ª—å —Å –ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–º –∏–∑–ª–∏–≤–æ–º',
        categoryId: categoryMap['–°–º–µ—Å–∏—Ç–µ–ª–∏'],
        price: 15000,
        imageUrl: '/products/washdown_rimless/8609.png'
      },
      {
        name: '–°–º–µ—Å–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∫–æ–≤–∏–Ω—ã 8614',
        description: '–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π —Å–º–µ—Å–∏—Ç–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –∏–∑–ª–∏–≤–æ–º',
        categoryId: categoryMap['–°–º–µ—Å–∏—Ç–µ–ª–∏'],
        price: 18000,
        imageUrl: '/products/washdown_rimless/8614.png'
      },
      {
        name: '–£–Ω–∏—Ç–∞–∑ –ø–æ–¥–≤–µ—Å–Ω–æ–π 9000',
        description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–æ–¥–≤–µ—Å–Ω–æ–π —É–Ω–∏—Ç–∞–∑',
        categoryId: categoryMap['–£–Ω–∏—Ç–∞–∑—ã'],
        price: 45000,
        imageUrl: '/products/washdown_rimless/9000.png'
      },
      {
        name: '–£–Ω–∏—Ç–∞–∑ –Ω–∞–ø–æ–ª—å–Ω—ã–π 9001',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –Ω–∞–ø–æ–ª—å–Ω—ã–π —É–Ω–∏—Ç–∞–∑',
        categoryId: categoryMap['–£–Ω–∏—Ç–∞–∑—ã'],
        price: 35000,
        imageUrl: '/products/washdown_rimless/9001.jpg'
      },
      {
        name: '–ö–æ—Ç–µ–ª –≥–∞–∑–æ–≤—ã–π 25 –∫–í—Ç',
        description: '–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –≥–∞–∑–æ–≤—ã–π –∫–æ—Ç–µ–ª',
        categoryId: categoryMap['–ö–æ—Ç–ª—ã'],
        price: 120000,
        imageUrl: '/products/boiler_hero.png'
      }
    ];

  for (const productData of products) {
    const existing = await prisma.product.findFirst({
      where: { name: productData.name }
    });

    if (!existing) {
      await prisma.product.create({
        data: productData
      });
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ç–æ–≤–∞—Ä: ${productData.name}`);
    } else {
      console.log(`‚ÑπÔ∏è  –¢–æ–≤–∞—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${productData.name}`);
    }
  }
}

async function main() {
  try {
    await seedProducts();
    console.log('üéâ ProductSeeder –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ ProductSeeder:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { seedProducts };
